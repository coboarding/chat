version: '3.8'

services:
  # Redis for daily data purging (GDPR compliance)
  redis:
    image: redis:7-alpine
    container_name: coboarding_redis
    ports:
      - "6379:6379"
    command: redis-server --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # PostgreSQL for structured data with daily cleanup
  postgres:
    image: postgres:15-alpine
    container_name: coboarding_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-coboarding}
      POSTGRES_USER: ${POSTGRES_USER:-coboarding}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_123}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-coboarding} -d ${POSTGRES_DB:-coboarding}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Ollama for local LLM models
  ollama:
    image: ollama/ollama:latest
    container_name: coboarding_ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_KEEP_ALIVE=24h
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 300s
    restart: unless-stopped

  # Main application (Streamlit + FastAPI)
  coboarding_app:
    build:
      context: ./app
      dockerfile: Dockerfile
    container_name: coboarding_app
    ports:
      - "8501:8501"  # Streamlit
      - "8000:8000"  # FastAPI backend
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://${POSTGRES_USER:-coboarding}:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/${POSTGRES_DB:-coboarding}
      - OLLAMA_URL=http://ollama:11434
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - SECRET_KEY=${SECRET_KEY:-your_secret_key_here_change_in_production}
      - SMTP_SERVER=${SMTP_SERVER:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - FROM_EMAIL=${FROM_EMAIL:-noreply@coboarding.com}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD:-}
      - WHATSAPP_TOKEN=${WHATSAPP_TOKEN:-}
      - WHATSAPP_PHONE_NUMBER_ID=${WHATSAPP_PHONE_NUMBER_ID:-}
      - DATA_RETENTION_HOURS=${DATA_RETENTION_HOURS:-24}
      - UPLOAD_DIR=/app/uploads
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-10485760}
    volumes:
      - ./uploads:/app/uploads
      - ./data:/app/data
      - ./templates:/app/templates
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      ollama:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/healthz"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s

  # Form automation worker (separate service for scaling)
  form_worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
    container_name: coboarding_worker
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://${POSTGRES_USER:-coboarding}:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/${POSTGRES_DB:-coboarding}
      - OLLAMA_URL=http://ollama:11434
      - WORKER_CONCURRENCY=${WORKER_CONCURRENCY:-3}
      - ENVIRONMENT=${ENVIRONMENT:-development}
    volumes:
      - ./downloads:/worker/downloads
      - ./uploads:/worker/uploads
      - ./logs:/worker/logs
    depends_on:
      - redis
      - postgres
      - ollama
      - coboarding_app
    restart: unless-stopped
    deploy:
      replicas: 2
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8080/health', timeout=5)"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 60s

  # n8n for workflow automation (future integrations)
  n8n:
    image: n8nio/n8n:latest
    container_name: coboarding_n8n
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=${N8N_BASIC_AUTH_ACTIVE:-true}
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD:-admin123}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=${POSTGRES_USER:-coboarding}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD:-secure_password_123}
      - N8N_HOST=localhost
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://localhost:5678/
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n/workflows:/home/node/.n8n/workflows
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:5678/healthz"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Daily cleanup cron job (GDPR compliance)
  cleanup:
    build:
      context: ./cleanup
      dockerfile: Dockerfile
    container_name: coboarding_cleanup
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://${POSTGRES_USER:-coboarding}:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/${POSTGRES_DB:-coboarding}
      - CLEANUP_ENABLED=${CLEANUP_ENABLED:-true}
      - DATA_RETENTION_HOURS=${DATA_RETENTION_HOURS:-24}
    volumes:
      - ./logs:/cleanup/logs
    depends_on:
      - redis
      - postgres
    restart: unless-stopped

  # Monitoring and observability (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: coboarding_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    profiles: ["monitoring"]

  grafana:
    image: grafana/grafana:latest
    container_name: coboarding_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles: ["monitoring"]

  # Nginx reverse proxy (production)
  nginx:
    image: nginx:alpine
    container_name: coboarding_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./uploads:/var/www/uploads:ro
    depends_on:
      - coboarding_app
    restart: unless-stopped
    profiles: ["production"]

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  ollama_data:
    driver: local
  n8n_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    name: coboarding_network
    driver: bridge